{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte",
    "BackgroundImage.svelte",
    "BackgroundMerge.svelte",
    "Annotation.svelte",
    "Balloon.svelte",
    "ChartTimeline.svelte",
    "PopUp.svelte",
    "UpperNavigation.svelte",
    "Scroller.svelte"
  ],
  "sourcesContent": [
    "<script>\n\timport * as d3 from \"d3\";\n    import { setContext, onMount } from \"svelte\";\n\timport { chartSearchTerm, chartExploreStore, scrollPositionStore } from \"./lib/stores.js\";\n    import BackgroundImage from \"./component/background/BackgroundImage.svelte\"\n    import BackgroundMerge from \"./component/background/BackgroundMerge.svelte\"\n    import BackgroundColor from \"./component/background/BackgroundColor.svelte\"\n\n    import Balloon from \"./component/foreground/Balloon.svelte\"\n    import Chart1 from \"./component/foreground/ChartTimeline.svelte\";\n    import UpperNavigation from \"./component/foreground/UpperNavigation.svelte\";\n    import ParallaxPopUps from \"./component/foreground/ParallaxPopUps.svelte\";\n    import Annotation from \"./component/foreground/Annotation.svelte\";\n\n    import Dashboard from \"./component/dashboard/Dashboard.svelte\"\n    import Section from \"./component/layout/Section.svelte\";\n    import Scroller from \"./component/layout/Scroller.svelte\";\n  \n    // import data\n    let data;\n\tlet chartWidth;\n    let loading = true;\n\tlet id = \"chart01\";\n    let balloonJourney;\n    let scrollY;\n    let background01;\n    let background02;\n    let background03;\n\n    $: scrollPositionStore.set(scrollY);\n\n\tonMount(async () => {\n\t\ttry {\n\t\t\tdata = await d3.csv('../data/data.csv');\n\t\t} catch (error) {\n\t\t\tconsole.error(\"Error loading data:\", error);\n\t\t\tdata = [];\n\t\t}\n\t\tloading = false;\n\t});\n\n    let theme = \"light\";\n    setContext(\"theme\", theme);\n\n    // scroller component\n    const threshold = 0.65;\n    const actions = {\n        chart: {\n            chart01: {\n                searchTerm: \"\",\n                explore: false\n            },\n            chart02: {\n                searchTerm:\"wind\",\n                explore: false\n            },\n\t\t\tchart03: {\n                searchTerm: \"climate\",\n                explore: false\n            },\n\t\t\tchart04: {\n                searchTerm: \"\",\n                explore: true\n            }\n        }\n    };\n\t$: {\n\t\thandleIdChange(id);\n\t}\n    \n\tfunction handleIdChange(id) {\n\t\tchartSearchTerm.set(actions['chart'][id]['searchTerm']);\n\t\tchartExploreStore.set(actions['chart'][id]['explore']);\n\t}\n    \n</script>\n\n<svelte:window bind:scrollY={scrollY} />\n\n<main>\n    <Section>\n        <h2>Scrolly example</h2>\n        <p>\n            Example text, example text, example text. Example text, example text, example text. Example text, example text, example text. Example text, example text, example text. Example text, example text, example text. Example text, example text, example text. Example text, example text, example text. Example text, example text, example text. Example text, example text, example text. Example text, example text, example text. Example text, example text, example text.\n        </p>\n        <p>\n            Example text, example text, example text. Example text, example text, example text. Example text, example text, example text. Example text, example text, example text. Example text, example text, example text. Example text, example text, example text. Example text, example text, example text. Example text, example text, example text. Example text, example text, example text. Example text, example text, example text. Example text, example text, example text.\n        </p>\n        <p>\n            Example text, example text, example text. Example text, example text, example text. Example text, example text, example text. Example text, example text, example text. Example text, example text, example text. Example text, example text, example text. Example text, example text, example text. Example text, example text, example text. Example text, example text, example text. Example text, example text, example text. Example text, example text, example text.\n        </p>\n        <UpperNavigation />\n    </Section>\n\n\n    <div id=\"balloon-journey\" bind:this={balloonJourney}>\n        {#if !loading && data.length > 0}\n            <Balloon {data} backgroundY={balloonJourney.getBoundingClientRect().top} />\n        {/if}\n\n        <BackgroundMerge color={\"0,0,0,\"} />\n\n        <BackgroundColor color={\"#000\"} height={\"4000px\"} >\n\n            <div\n                style=\"top: 1000px; position: relative;\"\n                id=\"annotation-1\"\n                bind:this={background01}\n            >   \n\n                {#if !loading && data.length > 0}\n                    <Annotation backgroundY={background01.getBoundingClientRect().top}>\n                        <span slot=\"heading\">Example Heading 1</span>\n                        <span slot=\"text\">\n                            Lots of lovely text here. Lots of lovely text here. Lots of lovely text here. Lots of lovely text here. Lots of lovely text here. Lots of lovely text here. Lots of lovely text here. Lots of lovely text here. Lots of lovely text here.\n                        <br /><br />\n                            Lots of lovely text here. Lots of lovely text here. Lots of lovely text here. Lots of lovely text here. Lots of lovely text here. Lots of lovely text here. Lots of lovely text here. Lots of lovely text here. Lots of lovely text here.\n                        </span>\n                        \n                    </Annotation>\n                {/if}\n\n            </div>\n\n            <div\n                style=\"top: 2000px; position: relative;\"\n                id=\"annotation-1\"\n                bind:this={background02}\n            >\n\n                {#if !loading && data.length > 0}\n                    <Annotation backgroundY={background02.getBoundingClientRect().top}>\n                        <span slot=\"heading\">Example Heading 2</span>\n                        <span slot=\"text\">\n                            Lots of lovely text here. Lots of lovely text here. Lots of lovely text here. Lots of lovely text here. Lots of lovely text here. Lots of lovely text here. Lots of lovely text here. Lots of lovely text here. Lots of lovely text here.\n                        <br /><br />\n                            Lots of lovely text here. Lots of lovely text here. Lots of lovely text here. Lots of lovely text here. Lots of lovely text here. Lots of lovely text here. Lots of lovely text here. Lots of lovely text here. Lots of lovely text here.\n                        </span>\n                        \n                    </Annotation>\n                {/if}\n\n            </div>\n\n        </BackgroundColor>\n\n        <BackgroundColor color={\"#000\"} height={\"4000px\"} >\n            <div\n                id=\"background-parralax-1\"\n                bind:this={background03}\n            >\n                {#if !loading && data.length > 0}\n                    <ParallaxPopUps \n                        {data}\n                        section={\"section01\"}\n                        backgroundY={background03.getBoundingClientRect().top}\n                        backgroundWidth={background03.getBoundingClientRect().width}\n                        userSelect=\"none\"\n                        popupIds={[\"23\", \"43\", \"40\", \"4\", \"58\", \"100\", \"99\", \"113\", \"82\", \"117\", \"123\", \"81\", \"86\", \"406\", \"23\", \"43\", \"40\", \"4\", \"58\", \"100\", \"99\", \"113\", \"82\", \"117\", \"123\", \"81\", \"86\", \"406\"]}\n                    />\n                {/if}\n            </div>\n        </BackgroundColor>\n\n        <Scroller {threshold} bind:id={id} splitscreen={true} backgroundColor={\"black\"}>\n            <div slot=\"background\">\n                <figure>\n                    <div class=\"col-wide height-full\">\n                        <div class=\"chart\" bind:clientWidth={chartWidth}>\n                            <Chart1 {data} {loading} {chartWidth} />\n                        </div>\n                    </div>\n                </figure>\n            </div>\n\n            <div slot=\"foreground\">\n                <section data-id=\"chart01\">\n                    <div class=\"col-medium\">\n                        <p>\n                            Here is some text that explains the view of the first chart. Here is some text that explains the view of the first chart. Here is some text that explains the view of the first chart. Here is some text that explains the view of the first chart.\n                        </p>\n                    </div>\n                </section>\n                <section data-id=\"chart02\">\n                    <div class=\"col-medium\">\n                        <p>\n                            Here is some text that explains the view of the second chart. Here is some text that explains the view of the second chart. Here is some text that explains the view of the second chart. Here is some text that explains the view of the second chart.\n                        </p>\n                    </div>\n                </section>\n                <section data-id=\"chart03\" />\n            </div>\n        </Scroller>\n\n        <BackgroundImage\n            id={\"background2\"}\n            src={\"/img/background2.png\"}\n        />\n\n    </div>\n\n    <Section>\n        <h2>Example scrolly end</h2>\n        <p>\n            Example text, example text, example text. Example text, example text, example text. Example text, example text, example text. Example text, example text, example text. Example text, example text, example text. Example text, example text, example text. Example text, example text, example text. Example text, example text, example text. Example text, example text, example text. Example text, example text, example text. Example text, example text, example text.\n        </p>\n        <p>\n            Example text, example text, example text. Example text, example text, example text. Example text, example text, example text. Example text, example text, example text. Example text, example text, example text. Example text, example text, example text. Example text, example text, example text. Example text, example text, example text. Example text, example text, example text. Example text, example text, example text. Example text, example text, example text.\n        </p>\n    </Section>\n\n    <Section>\n        <Dashboard {data} {loading}>\n            <h1>DASHBOARD STUFF HERE</h1>\n            <p>\n                Example text, example text, example text. Example text, example text, example text. Example text, example text, example text. Example text, example text, example text. Example text, example text, example text. Example text, example text, example text. Example text, example text, example text. Example text, example text, example text. Example text, example text, example text. Example text, example text, example text. Example text, example text, example text.\n            </p>\n            <p>\n                Example text, example text, example text. Example text, example text, example text. Example text, example text, example text. Example text, example text, example text. Example text, example text, example text. Example text, example text, example text. Example text, example text, example text. Example text, example text, example text. Example text, example text, example text. Example text, example text, example text. Example text, example text, example text.\n            </p>\n        </Dashboard>\n    </Section>\n</main>\n\n<style>\n    #balloon-journey {\n        position: relative;\n    }\n    .chart {\n        width: 100%;\n    }\n</style>\n",
    "<script>\r\n    export let id = \"background1\";\r\n    export let src = \"/img/background1.png\"\r\n</script>\r\n\r\n<img \r\n    id={id}\r\n    src={src}\r\n    width=\"100%\"\r\n    alt=\"background\"\r\n    draggable=\"false\"\r\n/>\r\n\r\n<style>\r\n    img {\r\n        display: block;\r\n        user-select: none !important;\r\n        -moz-user-select: none;\r\n        -webkit-user-drag: none;\r\n        -webkit-user-select: none;\r\n        -ms-user-select: none;\r\n    }\r\n</style>",
    "<script>\r\n    export let color = '0, 0, 0,';\r\n    let canvas;\r\n    let windowWidth;\r\n    let windowHeight = window.innerHeight;\r\n\r\n    $: if (canvas || windowWidth) {\r\n        generatePixels();\r\n    }\r\n\r\n    function generatePixels() {\r\n        let pixelsWidth = canvas ? canvas.clientWidth : 0;\r\n        const ctx = canvas.getContext('2d');\r\n        const grid = 200; // pixels in each row\r\n        const pW = Math.floor(pixelsWidth / grid) + 1;\r\n        const pH = pW;\r\n        const rows = Math.floor((windowHeight * 3) / pH); // number of rows\r\n\r\n        // adjust canvas height to fit all rows\r\n        const totalHeight = rows * pH;\r\n        canvas.width = pixelsWidth;\r\n        canvas.height = totalHeight;\r\n\r\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n        // draw each pixel as a filled rectangle\r\n        for (let i = 0; i < rows; i++) {\r\n            for (let j = 0; j < grid; j++) {\r\n\r\n                let randomScale = Math.random() * (-0.2 + (0.4 * (i / (rows - 1))));\r\n                let randomExtraJuice = (Math.random() - 1) / 10\r\n                let randomFactor = (randomScale - randomExtraJuice);\r\n\r\n                let baseOpacity = i / rows;\r\n                let finalOpacity = Math.min(1, Math.max(0, baseOpacity + randomFactor));\r\n\r\n                ctx.fillStyle = `rgba(${color} ${finalOpacity.toFixed(2)})`;\r\n                ctx.fillRect(j * pW, i * pH, pW, pH);\r\n            }\r\n        }\r\n    }\r\n</script>\r\n\r\n<div class=\"canvas-container\">\r\n    <canvas\r\n        id=\"pixelCanvas\"\r\n        bind:this={canvas}\r\n        bind:clientWidth={windowWidth}\r\n    ></canvas>\r\n</div>\r\n\r\n<style>\r\n    canvas {\r\n        width: 100%;\r\n        display: block;\r\n    }\r\n    \r\n    .canvas-container {\r\n        height: 100%; \r\n    }\r\n</style>\r\n",
    "<script>\r\n    import { scrollPositionStore } from \"../../lib/stores.js\";\r\n\r\n    export let color;\r\n    export let backgroundColor;\r\n    export let backgroundY;\r\n\r\n    let interval = null;\r\n    let heading;\r\n    let text;\r\n    let windowHeight;\r\n    let animationTriggered = false;\r\n\r\n    const absoluteBackgroundY = $scrollPositionStore + backgroundY;\r\n    $: relativeY = $scrollPositionStore - absoluteBackgroundY + windowHeight;\r\n\r\n    const letters = \"a b c d e f g h i j k l m n o p q r s t u v w x y z\";\r\n\r\n    // do this animation once\r\n    $: if (relativeY < 100 && relativeY > 0 && !animationTriggered) {\r\n        animationTriggered = true;\r\n\r\n        let iteration = 0;\r\n\r\n        const headingValue = heading?.innerText || '';\r\n        const textValue = text?.innerText || '';\r\n        const totalIterations = Math.max(headingValue.length, textValue.length);\r\n\r\n        clearInterval(interval);\r\n\r\n        interval = setInterval(() => {\r\n            if (iteration <= totalIterations) {\r\n                heading.innerText = headingValue\r\n                    .split(\"\")\r\n                    .map((letter, index) => {\r\n                        if (index < iteration) {\r\n                            return headingValue[index];\r\n                        }\r\n                        return letters[Math.floor(Math.random() * letters.length)];\r\n                    }).join(\"\");\r\n\r\n                text.innerText = textValue\r\n                    .split(\"\")\r\n                    .map((letter, index) => {\r\n                        if (index < iteration) {\r\n                            return textValue[index];\r\n                        }\r\n                        return letters[Math.floor(Math.random() * letters.length)];\r\n                    }).join(\"\");\r\n\r\n                if (iteration >= totalIterations) {\r\n                    clearInterval(interval);\r\n                }\r\n\r\n                iteration += 1;\r\n            }\r\n        }, 3);\r\n    }\r\n</script>\r\n\r\n<svelte:window bind:innerHeight={windowHeight} />\r\n\r\n<div \r\n    class=\"annotation\"\r\n    style=\"color: {color};\r\n    background-color: {backgroundColor};\"\r\n>\r\n    <h1 bind:this={heading}><slot name=\"heading\"></slot></h1>\r\n    <p bind:this={text}><slot name=\"text\"></slot></p>\r\n</div>\r\n\r\n<style>\r\n    .annotation {\r\n        position: relative;\r\n        max-width: 400px;\r\n        padding: 20px;\r\n        left: 50%;\r\n        transform: translateX(-50%);\r\n    }\r\n    p {\r\n        font-family: \"Space Mono\", monospace;\r\n        color: #fff;\r\n        padding: 0 20px 0 20px;\r\n    }\r\n    h1 {\r\n        font-family: \"Space Mono\", monospace;\r\n        color: #fff;\r\n        padding: 0 20px 20px 20px;\r\n        margin: 0;\r\n    }\r\n</style>\r\n",
    "<script>\r\n    import { narrativeStore, scrollPositionStore } from \"../../lib/stores.js\";\r\n    import { onMount } from 'svelte';\r\n    export let backgroundY;\r\n\r\n    const absoluteBackgroundY = $scrollPositionStore + backgroundY;\r\n    $: relativeY = $scrollPositionStore - absoluteBackgroundY;\r\n\r\n    const canvasWidth = 500;\r\n    const canvasHeight = 500;\r\n    const spriteWidth = 500;\r\n    const spriteHeight = 500;\r\n\r\n    let canvas;\r\n    let ctx;\r\n    let animationId;\r\n    let positionX = 50;\r\n\r\n    let frameX = 0;\r\n    let frameCount = 0;\r\n    const staggerFrames = 25;\r\n\r\n    const balloonImage = new Image();\r\n    $: balloonImage.src = `img/balloonImages_${$narrativeStore}.png`;\r\n\r\n    function cancelAnimation() {\r\n        if (animationId) {\r\n            cancelAnimationFrame(animationId); \r\n        }\r\n    }\r\n\r\n    function startAnimation() {\r\n        function animate() {\r\n            ctx.clearRect(0, 0, canvasWidth, canvasHeight);\r\n            ctx.drawImage(\r\n                balloonImage,\r\n                frameX * spriteWidth, 0, spriteWidth, spriteHeight,\r\n                0, 0, spriteWidth, spriteHeight\r\n            );\r\n\r\n            frameCount++;\r\n            if (frameCount % staggerFrames === 0) { // reset at end of loop\r\n                frameX = frameX < 3 ? frameX + 1 : 0;\r\n            }\r\n            if (frameCount > staggerFrames * 4) { // reset framecount to stop infinite climb\r\n                frameCount = 0;\r\n            }\r\n\r\n            animationId = requestAnimationFrame(animate);\r\n        }\r\n        animate();\r\n    }\r\n\r\n    onMount(() => {\r\n        ctx = canvas.getContext('2d');\r\n        canvas.width = canvasWidth;\r\n        canvas.height = canvasHeight;\r\n        frameCount = 0;\r\n\r\n        balloonImage.onload = function () {\r\n            cancelAnimation();  // cancel the previous animation\r\n            startAnimation();   // start a new animation\r\n        };\r\n    });\r\n\r\n    $: if (relativeY < 2700) {\r\n        positionX = 50;\r\n    } else if (relativeY >= 2700 && relativeY < 4000) {\r\n        positionX = 80;\r\n    } else if (relativeY >= 4000 && relativeY < 6000) {\r\n        positionX = 20;\r\n    } else if (relativeY >= 6000 && relativeY < 9500) {\r\n        positionX = 50;\r\n    } else if (relativeY >= 9500 && relativeY < 12500) {\r\n        positionX = 100;\r\n    } else if (relativeY >= 12500) {\r\n        positionX = 50;\r\n    }\r\n\r\n</script>\r\n\r\n<canvas\r\n    id=\"canvas1\"\r\n    bind:this={canvas}\r\n    style=\"left: {positionX}%\"\r\n    >\r\n</canvas>\r\n\r\n<style>\r\n    #canvas1 {\r\n        transition: all 1s ease-in-out;\r\n        border: 0;\r\n        background-color: transparent;\r\n        position: sticky;\r\n        top: 20%;\r\n        transform: translate(-50%, 0%);\r\n        width: 120px;\r\n        height: 120px;\r\n        z-index: 1000;\r\n    }\r\n</style>\r\n",
    "<p class=\"chart-text\">CHART GOES HERE</p>\r\n\r\n<style>\r\n    .chart-text {\r\n        font-size: 2rem;\r\n        color: white;\r\n        padding: 1rem;\r\n    }\r\n</style>",
    "<script>\r\n    import { timeFormat, timeParse } from 'd3-time-format';\r\n\r\n    export let data;\r\n    export let id;\r\n    export let top;\r\n    export let left;\r\n    export let relativeY;\r\n    export let modifier = 0;\r\n    export let userSelect = \"none\";\r\n    let d;\r\n\r\n    // get datapoint from data using id\r\n    $: d = data.find(d => d.id === id);\r\n\r\n    const parseTime = timeParse(\"%H:%M\");\r\n    const parseDate = timeParse(\"%Y-%m-%d\");\r\n    const formatTime = timeFormat(\"%I:%M %p\");\r\n    const formatDate = timeFormat(\"%b %-d, %Y\");\r\n\r\n</script>\r\n\r\n<div\r\n    class=\"details-card-container\"\r\n    style=\"padding: {top}px 0 0 {left}px; opacity: {1-modifier}\">\r\n    <div \r\n        class=\"details-card\"\r\n        style=\"transform: translateY({relativeY * modifier}px);\r\n        user-select: {userSelect};\r\n        -webkit-user-select: {userSelect};\r\n        -khtml-user-select: {userSelect};\r\n        -moz-user-select: -moz-{userSelect};\r\n        -o-user-select: {userSelect};\r\n        pointer-events: {userSelect};\"\r\n    >\r\n        {#if d}\r\n            <div class=\"post-title\">\r\n                <span class=\"post-name\"><a target='_blank' href='{d.user_link}'>{d.name}</a></span>\r\n                <span class=\"post-handle\">{d.handle}</span>\r\n            </div>\r\n            <p class=\"post-text\">{d.post_text}</p>\r\n            <img class=\"post-img\" src={\"/img/\" + d.img} alt=\"from social media\" />\r\n            <div class=\"post-datetime\">\r\n                <a target='_blank' href='{d.post_link}'>\r\n                    <span>{formatTime(parseTime(d.time))}</span> · <span>{formatDate(parseDate(d.date))}</span>\r\n                </a>\r\n            </div>\r\n        {/if}\r\n    </div>\r\n</div>\r\n\r\n<style>\r\n    .details-card {\r\n        max-width: 200px;\r\n        position: absolute;\r\n        background-color: #fff;\r\n        padding: 10px;\r\n        border: 1px solid #ccc;\r\n        border-radius: 5px;\r\n        box-shadow: #0000001f 0px 0px 7px;\r\n    }\r\n    .details-card-container {\r\n        transition: all .5s ease-in-out;\r\n        align-items: center;\r\n        justify-content: center;\r\n    }\r\n    .post-text {\r\n        max-width: 300px;\r\n        line-height: 1.25;\r\n        font-size: 9pt;\r\n        margin: 5px 0 5px 0;\r\n    }\r\n    .post-title {\r\n        display: flex;\r\n        align-items: left;\r\n        overflow: hidden;\r\n    }\r\n    .post-name {\r\n        text-wrap: nowrap;\r\n        font-weight: 700;\r\n        font-size: 10pt;\r\n    }\r\n    .post-name a {\r\n        color: #000;\r\n        text-decoration: none;\r\n    }\r\n    .post-name a:hover {\r\n        text-decoration: underline;\r\n    }\r\n    .post-handle {\r\n        white-space: nowrap;\r\n        font-size: 9pt;\r\n        padding: 0 0 0 8px;\r\n        overflow: hidden;\r\n        text-overflow: ellipsis;\r\n    }\r\n    .post-img {\r\n        object-fit: cover;\r\n        width: 100%;\r\n        border-radius: 10px;\r\n    }\r\n    .post-datetime a {\r\n        font-size: 9pt;\r\n        color: #666;\r\n        text-decoration: none;\r\n    }\r\n    .post-datetime a:hover {\r\n        text-decoration: underline;\r\n    }\r\n</style>",
    "<script>\r\n    import { narrativeStore } from \"../../lib/stores.js\";\r\n\r\n    function handleIdChange(id) {\r\n        narrativeStore.set(id);\r\n    }\r\n</script>\r\n\r\n<div class=\"button-container\">\r\n<button\r\n    id=\"narrative01-button\"\r\n    class=\"narrative-choice geo-regular\"\r\n    class:selected={$narrativeStore === 'narrative1'}\r\n    on:click={() => handleIdChange('narrative1')}\r\n    on:keydown={(e) => e.key === 'Enter' && handleIdChange('narrative1')}\r\n    >Windy stuff</button>\r\n\r\n<button\r\n    id=\"narrative02-button\"\r\n    class=\"narrative-choice geo-regular\"\r\n    class:selected={$narrativeStore === 'narrative2'}\r\n    on:click={() => handleIdChange('narrative2')}\r\n    on:keydown={(e) => e.key === 'Enter' && handleIdChange('narrative2')}\r\n    >Solar panels</button>\r\n\r\n<button\r\n    id=\"narrative03-button\"\r\n    class=\"narrative-choice geo-regular\"\r\n    class:selected={$narrativeStore === 'narrative3'}\r\n    on:click={() => handleIdChange('narrative3')}\r\n    on:keydown={(e) => e.key === 'Enter' && handleIdChange('narrative3')}\r\n    >Electric vehicles</button>\r\n</div>\r\n\r\n<style>\r\n    .button-container {\r\n        display: flex;\r\n        justify-content: center;\r\n        gap: 1rem;\r\n        flex-wrap: wrap;\r\n        padding: 20px 0 20px 0;\r\n    }\r\n\r\n    .narrative-choice {\r\n        font-family: \"Space Mono\", monospace;\r\n        background-color: #f0f0f0;\r\n        border: 1px solid #ccc;\r\n        padding: 0.5rem 1rem;\r\n        cursor: pointer;\r\n        flex: 1 1 100%;\r\n        border-color: #FFFFFF #151515 #151515 #FFFFFF;\r\n        border-style: solid;\r\n    }\r\n\r\n    .narrative-choice:hover {\r\n        background-color: #e0e0e0;\r\n    }\r\n\r\n    .narrative-choice:active {\r\n        background: #cccccc;\r\n    }\r\n\r\n    .narrative-choice.selected {\r\n        background-color: #cccccc;\r\n        border-color: #151515 #FFFFFF #FFFFFF #151515;\r\n    }\r\n    \r\n    @media (min-width: 400px) {\r\n        .narrative-choice {\r\n            flex: 0 1 auto;\r\n            max-width: none;\r\n        }\r\n    }\r\n</style>",
    "\r\n<script context=\"module\">\r\n\r\n\tconst handlers = [];\r\n\tlet manager;\r\n\r\n\tif (typeof window !== 'undefined') {\r\n\t\tconst run_all = () => handlers.forEach(fn => fn());\r\n\r\n\t\twindow.addEventListener('scroll', run_all);\r\n\t\twindow.addEventListener('resize', run_all);\r\n\t}\r\n\r\n\tif (typeof IntersectionObserver !== 'undefined') {\r\n\t\tconst map = new Map();\r\n\r\n\t\tconst observer = new IntersectionObserver((entries, observer) => {\r\n\t\t\tentries.forEach(entry => {\r\n\t\t\t\tconst update = map.get(entry.target);\r\n\t\t\t\tconst index = handlers.indexOf(update);\r\n\r\n\t\t\t\tif (entry.isIntersecting) {\r\n\t\t\t\t\tif (index === -1) handlers.push(update);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tupdate();\r\n\t\t\t\t\tif (index !== -1) handlers.splice(index, 1);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}, {\r\n\t\t\trootMargin: '400px 0px' // TODO why 400?\r\n\t\t});\r\n\r\n\t\tmanager = {\r\n\t\t\tadd: ({ outer, update }) => {\r\n\t\t\t\tconst { top, bottom } = outer.getBoundingClientRect();\r\n\r\n\t\t\t\tif (top < window.innerHeight && bottom > 0) handlers.push(update);\r\n\r\n\t\t\t\tmap.set(outer, update);\r\n\t\t\t\tobserver.observe(outer);\r\n\t\t\t},\r\n\r\n\t\t\tremove: ({ outer, update }) => {\r\n\t\t\t\tconst index = handlers.indexOf(update);\r\n\t\t\t\tif (index !== -1) handlers.splice(index, 1);\r\n\r\n\t\t\t\tmap.delete(outer);\r\n\t\t\t\tobserver.unobserve(outer);\r\n\t\t\t}\r\n\t\t};\r\n\t} else {\r\n\t\tmanager = {\r\n\t\t\tadd: ({ update }) => {\r\n\t\t\t\thandlers.push(update);\r\n\t\t\t},\r\n\r\n\t\t\tremove: ({ update }) => {\r\n\t\t\t\tconst index = handlers.indexOf(update);\r\n\t\t\t\tif (index !== -1) handlers.splice(index, 1);\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n</script>\r\n\r\n<script>\r\n\timport { onMount } from 'svelte';\r\n\r\n\t// config\r\n\texport let top = 0;\r\n\texport let bottom = 1;\r\n\texport let threshold = 0.5;\r\n\texport let query = 'section';\r\n\texport let parallax = false;\r\n\r\n\t// bindings\r\n\texport let index = 0;\r\n\texport let count = 0;\r\n\texport let offset = 0;\r\n\texport let progress = 0;\r\n\texport let visible = false;\r\n\texport let splitscreen = false; // add class to allow for split screen option\r\n\texport let id = null;\r\n\texport let backgroundColor = \"white\";\r\n\r\n\tlet outer;\r\n  \tlet bgContainer; // ie patch, container binding to update inline style\r\n\tlet foreground;\r\n\tlet background;\r\n\tlet left;\r\n\tlet sections;\r\n\tlet wh = 0;\r\n\tlet fixed;\r\n\tlet offset_top;\r\n\tlet width = 1;\r\n\tlet inverted;\r\n\r\n\t$: top_px = Math.round(top * wh);\r\n\t$: bottom_px = Math.round(bottom * wh);\r\n\t$: threshold_px = Math.round(threshold * wh);\r\n\r\n\t$: (top, bottom, threshold, parallax, update());\r\n\r\n\tonMount(() => {\r\n\t\tsections = foreground.querySelectorAll(query);\r\n\t\tcount = sections.length;\r\n\r\n\t\tupdate();\r\n\r\n\t\tconst scroller = { outer, update };\r\n\r\n\t\tmanager.add(scroller);\r\n\t\treturn () => manager.remove(scroller);\r\n\t});\r\n\r\n\t// ie patch. BG container style (fixed/unfixed) set via function\r\n  function setFixed() {\r\n    if (bgContainer) {\r\n      let style = `position: ${fixed ? 'fixed' : 'absolute'}; top: 0; transform: translate(0, ${offset_top}px); width: ${width}px; z-index: ${inverted ? 3 : 1};`;\r\n      bgContainer.style.cssText = style;\r\n    }\r\n  }\r\n\r\n\tfunction update() {\r\n\t\tif (!foreground) return;\r\n\r\n\t\t// re-measure outer container\r\n\t\tconst bcr = outer.getBoundingClientRect();\r\n\t\tleft = bcr.left;\r\n\t\twidth = bcr.right - bcr.left;\r\n\r\n\t\t// determine fix state\r\n\t\tconst fg = foreground.getBoundingClientRect();\r\n\t\tconst bg = background.getBoundingClientRect();\r\n\r\n\t\tvisible = fg.top < wh && fg.bottom > 0;\r\n\r\n\t\tconst foreground_height = fg.bottom - fg.top;\r\n\t\tconst background_height = bg.bottom - bg.top;\r\n\r\n\t\tconst available_space = bottom_px - top_px;\r\n\t\tprogress = (top_px - fg.top) / (foreground_height - available_space);\r\n\r\n\t\tif (progress <= 0) {\r\n\t\t\toffset_top = 0;\r\n      if (fixed) {\r\n        fixed = false;\r\n        setFixed();\r\n      } // Non-ie specific patch to avoid setting style repeatedly\r\n\t\t} else if (progress >= 1) {\r\n\t\t\toffset_top = parallax\r\n\t\t\t\t? (foreground_height - background_height)\r\n\t\t\t\t: (foreground_height - available_space);\r\n      if (fixed) {\r\n        fixed = false;\r\n        setFixed();\r\n      }\r\n\t\t} else {\r\n\t\t\toffset_top = parallax ?\r\n\t\t\t\tMath.round(top_px - progress * (background_height - available_space)) :\r\n\t\t\t\ttop_px;\r\n      if (!fixed) {\r\n        fixed = true;\r\n        setFixed();\r\n      }\r\n\t\t}\r\n\r\n\t\tfor (index = 0; index < sections.length; index += 1) {\r\n\t\t\tconst section = sections[index];\r\n\t\t\tconst { top } = section.getBoundingClientRect();\r\n\r\n\t\t\tconst next = sections[index + 1];\r\n\t\t\tconst bottom = next ? next.getBoundingClientRect().top : fg.bottom;\r\n\r\n\t\t\toffset = (threshold_px - top) / (bottom - top);\r\n\t\t\tid = section.dataset.id ? section.dataset.id : null;\r\n\t\t\tif (bottom >= threshold_px) break;\r\n\t\t}\r\n\t}\r\n</script>\r\n\r\n<svelte:window bind:innerHeight={wh}/>\r\n\r\n<svelte-scroller-outer bind:this={outer} class:splitscreen style=\"background-color: {backgroundColor}\">\r\n\t<svelte-scroller-background-container class='background-container' bind:this={bgContainer}>\r\n\t\t<svelte-scroller-background bind:this={background}>\r\n\t\t\t<slot name=\"background\"></slot>\r\n\t\t</svelte-scroller-background>\r\n\t</svelte-scroller-background-container>\r\n\r\n\t<svelte-scroller-foreground bind:this={foreground}>\r\n\t\t<slot name=\"foreground\"></slot>\r\n\t</svelte-scroller-foreground>\r\n</svelte-scroller-outer>\r\n\r\n<style>\r\n\tsvelte-scroller-outer {\r\n\t\tdisplay: block;\r\n\t\tposition: relative;\r\n\t\tmax-width: 100%;\r\n\t}\r\n\r\n\tsvelte-scroller-background {\r\n\t\tdisplay: block;\r\n\t\tposition: relative;\r\n\t\twidth: 100%;\r\n\t}\r\n\r\n\tsvelte-scroller-foreground {\r\n\t\tdisplay: block;\r\n\t\tposition: relative;\r\n\t\tz-index: 2;\r\n\t}\r\n\r\n\tsvelte-scroller-foreground::after {\r\n\t\tcontent: ' ';\r\n\t\tdisplay: block;\r\n\t\tclear: both;\r\n\t}\r\n\r\n\tsvelte-scroller-background-container {\r\n\t\tdisplay: block;\r\n\t\tposition: absolute;\r\n\t\twidth: 100%;\r\n\t\tmax-width: 100%;\r\n\t\tpointer-events: none;\r\n\t\twill-change: transform;\r\n\t}\r\n</style>"
  ],
  "names": [],
  "mappings": "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"
}